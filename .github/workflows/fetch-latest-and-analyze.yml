name: Fetch Latest and Analyze

on:
  workflow_dispatch:

permissions:
  models: read
  contents: read

jobs:
  fetch-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Playwright
        run: |
          npm init -y
          npm install playwright

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Fetch discussions
        run: node scripts/fetch-discussions.js

      - name: Analyze discussions with AI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f "discussions.json" ]; then
            echo "=== ANALYZING DISCUSSIONS WITH GPT-4O ==="
            
            # Install jq if not available
            if ! command -v jq &> /dev/null; then
              apt-get update && apt-get install -y jq
            fi
            
            # Read discussions data
            DISCUSSIONS=$(cat discussions.json)
            
            # Check if there are any discussions
            if [ "$(echo "$DISCUSSIONS" | jq 'length')" -eq 0 ]; then
              echo "No discussions found from the last 30 days."
              exit 0
            fi
            
            # Create a simplified discussion list for AI analysis
            DISCUSSION_LIST=$(echo "$DISCUSSIONS" | jq -r '.[] | "Title: \(.title) | Author: \(.author) | Comments: \(.commentCount) | Date: \(.timeText) | URL: \(.url)"')
            
            # Create AI analysis prompt
            cat > analysis_prompt.txt << 'EOF'
          You are an expert at analyzing GitHub discussions to identify potential bug reports and categorize discussions. 

          Please analyze the following GitHub discussions from the Models category and classify each one into one of these categories:
          - BUG_REPORT: Issues, problems, errors, crashes, things not working as expected
          - FEATURE_REQUEST: Requests for new features, enhancements, improvements
          - QUESTION: How-to questions, help requests, clarifications, documentation questions
          - DISCUSSION: General discussions, announcements, sharing experiences

          For each discussion, provide:
          1. Classification (BUG_REPORT, FEATURE_REQUEST, QUESTION, or DISCUSSION)
          2. Confidence score (0-100%)
          3. Brief reasoning (1-2 sentences)

          Format your response as a JSON array with this structure:
          [
            {
              "title": "Discussion title",
              "classification": "BUG_REPORT",
              "confidence": 85,
              "reasoning": "The title mentions 'empty outputs' which suggests a functionality issue or bug."
            }
          ]

          Here are the discussions to analyze:
          EOF
            
            # Add discussions to prompt
            echo "$DISCUSSION_LIST" >> analysis_prompt.txt
            
            # Read the prompt
            PROMPT=$(cat analysis_prompt.txt)
            
            # Call GitHub Models API with GPT-4o
            echo "Calling GPT-4o for analysis..."
            
            # Debug: Check if we have a token
            if [ -z "$GITHUB_TOKEN" ]; then
              echo "ERROR: GITHUB_TOKEN is not set"
              exit 1
            fi
            
            echo "Token length: ${#GITHUB_TOKEN}"
            echo "Making API request to GitHub Models..."
            
            # First, test with a simple request using correct endpoint
            echo "Testing API with simple request..."
            TEST_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" "https://models.github.ai/inference/chat/completions" \
              -H "Accept: application/vnd.github+json" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d '{
                "model": "openai/gpt-4.1",
                "messages": [
                  {
                    "role": "user",
                    "content": "Hello, respond with just SUCCESS"
                  }
                ]
              }')
            
            TEST_STATUS=$(echo "$TEST_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
            TEST_API_RESPONSE=$(echo "$TEST_RESPONSE" | sed '/HTTP_STATUS:/d')
            
            echo "Test HTTP Status: $TEST_STATUS"
            echo "Test Response: $TEST_API_RESPONSE"
            
            if [ "$TEST_STATUS" != "200" ]; then
              echo "API test failed. Trying GPT-4o model..."
              TEST_RESPONSE2=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" "https://models.github.ai/inference/chat/completions" \
                -H "Accept: application/vnd.github+json" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -d '{
                  "model": "openai/gpt-4o",
                  "messages": [
                    {
                      "role": "user",
                      "content": "Hello, respond with just SUCCESS"
                    }
                  ]
                }')
              
              TEST_STATUS2=$(echo "$TEST_RESPONSE2" | grep "HTTP_STATUS:" | cut -d: -f2)
              TEST_API_RESPONSE2=$(echo "$TEST_RESPONSE2" | sed '/HTTP_STATUS:/d')
              
              echo "Test 2 HTTP Status: $TEST_STATUS2"
              echo "Test 2 Response: $TEST_API_RESPONSE2"
            fi
            
            # Use the correct API endpoint and model format
            AI_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" "https://models.github.ai/inference/chat/completions" \
              -H "Accept: application/vnd.github+json" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d "{
                \"model\": \"openai/gpt-4o\",
                \"messages\": [
                  {
                    \"role\": \"user\",
                    \"content\": $(echo "$PROMPT" | jq -Rs .)
                  }
                ]
              }")
            
            # Extract HTTP status and response
            HTTP_STATUS=$(echo "$AI_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
            API_RESPONSE=$(echo "$AI_RESPONSE" | sed '/HTTP_STATUS:/d')
            
            echo "HTTP Status: $HTTP_STATUS"
            echo "Full API Response (first 500 chars): $(echo "$API_RESPONSE" | head -c 500)"
            
            # Check if the request was successful
            if [ "$HTTP_STATUS" != "200" ]; then
              echo "API request failed with status $HTTP_STATUS"
              echo "Response: $API_RESPONSE"
              
              # Try alternative model or endpoint
              echo "Trying alternative model (gpt-4.1)..."
              AI_RESPONSE_ALT=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" "https://models.github.ai/inference/chat/completions" \
                -H "Accept: application/vnd.github+json" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -d "{
                  \"model\": \"openai/gpt-4.1\",
                  \"messages\": [
                    {
                      \"role\": \"user\",
                      \"content\": $(echo "$PROMPT" | jq -Rs .)
                    }
                  ]
                }")
              
              HTTP_STATUS_ALT=$(echo "$AI_RESPONSE_ALT" | grep "HTTP_STATUS:" | cut -d: -f2)
              API_RESPONSE_ALT=$(echo "$AI_RESPONSE_ALT" | sed '/HTTP_STATUS:/d')
              
              echo "Alternative HTTP Status: $HTTP_STATUS_ALT"
              echo "Alternative API Response: $API_RESPONSE_ALT"
              
              if [ "$HTTP_STATUS_ALT" = "200" ]; then
                AI_ANALYSIS=$(echo "$API_RESPONSE_ALT" | jq -r '.choices[0].message.content')
                echo "Successfully used alternative endpoint"
              else
                echo "Both API endpoints failed. Using fallback keyword analysis..."
                
                # Fallback to keyword-based analysis
                AI_ANALYSIS=$(echo "$DISCUSSIONS" | jq -r '[.[] | {
                  "title": .title,
                  "classification": (if (.title | ascii_downcase | test("bug|error|issue|problem|broken|not working|fail|crash|exception|wrong|incorrect")) then "BUG_REPORT"
                    elif (.title | ascii_downcase | test("feature|request|enhancement|improvement|add|support")) then "FEATURE_REQUEST"  
                    elif (.title | ascii_downcase | test("how to|question|help|documentation|guide|usage")) then "QUESTION"
                    else "DISCUSSION" end),
                  "confidence": (if (.title | ascii_downcase | test("bug|error|crash")) then 80
                    elif (.title | ascii_downcase | test("issue|problem|broken")) then 70
                    elif (.title | ascii_downcase | test("feature|request")) then 75
                    elif (.title | ascii_downcase | test("how to|question")) then 65
                    else 50 end),
                  "reasoning": "Classified using keyword analysis as GitHub Models API is not available."
                }]')
                
                echo "Using fallback keyword analysis"
              fi
            else
              # Extract AI response content
              AI_ANALYSIS=$(echo "$API_RESPONSE" | jq -r '.choices[0].message.content')
            fi
            
            echo "=== AI ANALYSIS RESULTS ==="
            echo "$AI_ANALYSIS"
            
            # Parse AI analysis and create summary
            echo -e "\n=== ANALYSIS SUMMARY ==="
            
            # Try to extract JSON and create summary
            if echo "$AI_ANALYSIS" | jq -e . >/dev/null 2>&1; then
              echo "Processing AI analysis..."
              
              BUG_COUNT=$(echo "$AI_ANALYSIS" | jq '[.[] | select(.classification == "BUG_REPORT")] | length')
              FEATURE_COUNT=$(echo "$AI_ANALYSIS" | jq '[.[] | select(.classification == "FEATURE_REQUEST")] | length')
              QUESTION_COUNT=$(echo "$AI_ANALYSIS" | jq '[.[] | select(.classification == "QUESTION")] | length')
              DISCUSSION_COUNT=$(echo "$AI_ANALYSIS" | jq '[.[] | select(.classification == "DISCUSSION")] | length')
              
              echo "🐛 Bug Reports: $BUG_COUNT"
              echo "✨ Feature Requests: $FEATURE_COUNT"
              echo "❓ Questions: $QUESTION_COUNT"
              echo "💬 General Discussions: $DISCUSSION_COUNT"
              
              # Show bug reports in detail
              echo -e "\n=== IDENTIFIED BUG REPORTS ==="
              echo "$AI_ANALYSIS" | jq -r '.[] | select(.classification == "BUG_REPORT") | "🐛 \(.title) (Confidence: \(.confidence)%)\n   Reasoning: \(.reasoning)\n"'
              
              # Show most recent discussion analysis
              echo -e "\n=== MOST RECENT DISCUSSION ANALYSIS ==="
              LATEST_TITLE=$(echo "$DISCUSSIONS" | jq -r '.[0].title')
              echo "$AI_ANALYSIS" | jq -r --arg title "$LATEST_TITLE" '.[] | select(.title == $title) | "Title: \(.title)\nClassification: \(.classification)\nConfidence: \(.confidence)%\nReasoning: \(.reasoning)"'
              
            else
              echo "Could not parse AI response as JSON. Raw response:"
              echo "$AI_ANALYSIS"
            fi
            
            # Clean up
            rm -f analysis_prompt.txt
            
          else
            echo "No discussions.json file found. Skipping analysis."
          fi
