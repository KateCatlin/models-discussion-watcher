name: Fetch Latest and Analyze

on:
  workflow_dispatch:

permissions:
  models: read
  contents: read

jobs:
  fetch-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Playwright
        run: |
          npm init -y
          npm install playwright

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Fetch discussions
        run: node scripts/fetch-discussions.js

      - name: Analyze discussions with AI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f "discussions.json" ]; then
            echo "=== ANALYZING DISCUSSIONS WITH GPT-4O ==="
            
            # Install jq if not available
            if ! command -v jq &> /dev/null; then
              apt-get update && apt-get install -y jq
            fi
            
            # Read discussions data
            DISCUSSIONS=$(cat discussions.json)
            
            # Check if there are any discussions
            if [ "$(echo "$DISCUSSIONS" | jq 'length')" -eq 0 ]; then
              echo "No discussions found from the last 30 days."
              exit 0
            fi
            
            # Create a simplified discussion list for AI analysis
            DISCUSSION_LIST=$(echo "$DISCUSSIONS" | jq -r '.[] | "Title: \(.title) | Author: \(.author) | Comments: \(.commentCount) | Date: \(.timeText) | URL: \(.url)"')
            
            # Create AI analysis prompt
            cat > analysis_prompt.txt << 'EOF'
          You are an expert at analyzing GitHub discussions to identify potential bug reports and categorize discussions. 

          Please analyze the following GitHub discussions from the Models category and classify each one into one of these categories:
          - BUG_REPORT: Issues, problems, errors, crashes, things not working as expected
          - FEATURE_REQUEST: Requests for new features, enhancements, improvements
          - QUESTION: How-to questions, help requests, clarifications, documentation questions
          - DISCUSSION: General discussions, announcements, sharing experiences

          For each discussion, provide:
          1. Classification (BUG_REPORT, FEATURE_REQUEST, QUESTION, or DISCUSSION)
          2. Confidence score (0-100%)
          3. Brief reasoning (1-2 sentences)

          Format your response as a JSON array with this structure:
          [
            {
              "title": "Discussion title",
              "classification": "BUG_REPORT",
              "confidence": 85,
              "reasoning": "The title mentions 'empty outputs' which suggests a functionality issue or bug."
            }
          ]

          Here are the discussions to analyze:
          EOF
            
            # Add discussions to prompt
            echo "$DISCUSSION_LIST" >> analysis_prompt.txt
            
            # Read the prompt
            PROMPT=$(cat analysis_prompt.txt)
            
            # Call GitHub Models API with GPT-4o
            echo "Calling GPT-4o for analysis..."
            AI_RESPONSE=$(curl -s "https://models.github.ai/inference/chat/completions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -d "{
                \"messages\": [
                  {
                    \"role\": \"user\",
                    \"content\": $(echo "$PROMPT" | jq -Rs .)
                  }
                ],
                \"model\": \"openai/gpt-4o\"
              }")
            
            # Extract AI response content
            AI_ANALYSIS=$(echo "$AI_RESPONSE" | jq -r '.choices[0].message.content')
            
            echo "=== AI ANALYSIS RESULTS ==="
            echo "$AI_ANALYSIS"
            
            # Parse AI analysis and create summary
            echo -e "\n=== ANALYSIS SUMMARY ==="
            
            # Try to extract JSON and create summary
            if echo "$AI_ANALYSIS" | jq -e . >/dev/null 2>&1; then
              echo "Processing AI analysis..."
              
              BUG_COUNT=$(echo "$AI_ANALYSIS" | jq '[.[] | select(.classification == "BUG_REPORT")] | length')
              FEATURE_COUNT=$(echo "$AI_ANALYSIS" | jq '[.[] | select(.classification == "FEATURE_REQUEST")] | length')
              QUESTION_COUNT=$(echo "$AI_ANALYSIS" | jq '[.[] | select(.classification == "QUESTION")] | length')
              DISCUSSION_COUNT=$(echo "$AI_ANALYSIS" | jq '[.[] | select(.classification == "DISCUSSION")] | length')
              
              echo "üêõ Bug Reports: $BUG_COUNT"
              echo "‚ú® Feature Requests: $FEATURE_COUNT"
              echo "‚ùì Questions: $QUESTION_COUNT"
              echo "üí¨ General Discussions: $DISCUSSION_COUNT"
              
              # Show bug reports in detail
              echo -e "\n=== IDENTIFIED BUG REPORTS ==="
              echo "$AI_ANALYSIS" | jq -r '.[] | select(.classification == "BUG_REPORT") | "üêõ \(.title) (Confidence: \(.confidence)%)\n   Reasoning: \(.reasoning)\n"'
              
              # Show most recent discussion analysis
              echo -e "\n=== MOST RECENT DISCUSSION ANALYSIS ==="
              LATEST_TITLE=$(echo "$DISCUSSIONS" | jq -r '.[0].title')
              echo "$AI_ANALYSIS" | jq -r --arg title "$LATEST_TITLE" '.[] | select(.title == $title) | "Title: \(.title)\nClassification: \(.classification)\nConfidence: \(.confidence)%\nReasoning: \(.reasoning)"'
              
            else
              echo "Could not parse AI response as JSON. Raw response:"
              echo "$AI_ANALYSIS"
            fi
            
            # Clean up
            rm -f analysis_prompt.txt
            
          else
            echo "No discussions.json file found. Skipping analysis."
          fi
