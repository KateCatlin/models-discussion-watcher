name: Monitor Community “Models” Discussions

on:
  workflow_dispatch:

permissions:
  models: read
  contents: write

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (for cache file)
        uses: actions/checkout@v4

      - name: Create cache file if missing
        run: |
          mkdir -p .github
          touch .github/models-discussion-cache.txt

      - name: Fetch discussion index page
        run: curl -sL "https://github.com/orgs/community/discussions/categories/models" -o page.html

      - name: Extract discussion URLs
        run: |
          grep -Eo '/orgs/community/discussions/[0-9]+' page.html \
          | sort -u > all_discussions.txt

      - name: Filter out previously seen discussions
        run: |
          comm -23 all_discussions.txt .github/models-discussion-cache.txt > new_discussions.txt
          echo "New discussions found: $(wc -l < new_discussions.txt)"

      - name: Classify new discussions
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          printf "%-5s  %-8s  %s\n" "BUG?" "NUMBER" "TITLE / URL" > results.txt
          printf "%-5s  %-8s  %s\n" "-----" "-------" "------------------------" >> results.txt

          while read -r path; do
            [ -z "$path" ] && continue  # skip blank lines
            number="${path##*/}"
            url="https://github.com${path}"
            title=$(curl -sL "$url" | sed -n 's/^[[:space:]]*<title>\(.*\)<\/title>/\1/p' | head -n1)

            cat > payload.json <<EOF
{
  "messages": [
    { "role": "system", "content": "Return ONLY YES or NO." },
    { "role": "user", "content": "Does the following GitHub Discussion title sound like a bug report?\n\n\"$title\"" }
  ],
  "model": "openai/gpt-4o"
}
EOF

            answer=$(curl -sL "https://models.github.ai/inference/chat/completions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -d @payload.json | jq -r '.choices[0].message.content' | tr -d '\n')

            printf "%-5s  #% -6s  %s | %s\n" "$answer" "$number" "$title" "$url" >> results.txt
            echo "$path" >> .github/models-discussion-cache.txt
          done < new_discussions.txt


      - name: Print results
        run: cat results.txt

      - name: Commit updated cache
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update models discussion cache"
          file_pattern: .github/models-discussion-cache.txt

